parameters:
- name: environment
  type: string
- name: microservice
  type: string
- name: branch_artifact_selector
  type: string
- name: branch_artifact_value
  type: string
- name: configmap
  type: boolean
- name: deployFunction
  type: boolean
- name: adoEnv
  type: string
- name: namespace
  type: string

jobs:
- deployment: Microservice
  environment: "EY Comply.${{ parameters.microservice }}"
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self

        - script: |
            echo "##vso[task.setvariable variable=BRANCH_ARTIFACT_VALUE_PARSED]$(echo ${{ parameters.branch_artifact_value }} |tr -cd '[:print:]' |tr -d '[[:blank:]]')"
          displayName: 'Clean up input string'

        - script: |
            AKS_LB_PARSED=$(echo "$(AKS_LB)" | tr '[A-Z]' '[a-z]')
            echo "##vso[task.setvariable variable=AKS_LB_PARSED]$AKS_LB_PARSED"
          displayName: 'Set AKS LoadBalancer variable'

        - script: |
            echo "##vso[task.setvariable variable=INGRESS_REWRITE]"$(${{ parameters.microservice }}-ingress-rewrite)""
          displayName: 'Set INGRESS_REWRITE variable'
          enabled: true

        - script: |
            INGRESS_PATH='/fry9c$(INGRESS_REWRITE)/(.*)'
            echo '##vso[task.setvariable variable=INGRESS_PATH]'$INGRESS_PATH''
          displayName: 'Set INGRESS_PATH variable'
          enabled: true

        - script: |
            cp ./pipelines/bcm-fry9c/backend/hpascript.sh $(Build.SourcesDirectory)
          displayName: Copy hpascript.sh in to $(Build.SourcesDirectory)

        - task: Bash@3
          displayName: 'Set HPA and PROXY variables'
          inputs:
            filePath: hpascript.sh
          env:
            microsvc: ${{ parameters.microservice }}
            env: ${{ parameters.environment }}

        - script: |
            cd $(Build.SourcesDirectory)
            echo "Replacing variables in manifest files..."
            sed -i "s|{{PORTAL}}|$(PORTAL)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{PORTAL}}|$(PORTAL)|g" ./kubernetes/02-service.yml
            sed -i "s|{{PORTAL}}|$(PORTAL)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{PORTAL}}|$(PORTAL)|g" ./kubernetes/04-hpa.yml
            sed -i "s|{{MICROSVC}}|$(MICROSVC)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{MICROSVC}}|$(MICROSVC)|g" ./kubernetes/02-service.yml
            sed -i "s|{{MICROSVC}}|$(MICROSVC)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{MICROSVC}}|$(MICROSVC)|g" ./kubernetes/04-hpa.yml
            sed -i "s|{{DOCKER_IMAGE_PATH}}|$(DOCKER_IMAGE_PATH)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{BUILD_VAR}}|$(BUILD_VAR)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{DOCKER_PORT}}|$(DOCKER_PORT)|g" ./kubernetes/02-service.yml
            sed -i "s|{{DOCKER_PORT}}|$(DOCKER_PORT)|g" ./kubernetes/03-ingress-object.yml
            sed -i 's|{{INGRESS_REWRITE}}\/$6|$(INGRESS_REWRITE)\/$1|g'  ./kubernetes/03-ingress-object.yml
            sed -i "s#{{INGRESS_PATH}}#$(INGRESS_PATH)#g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{PROXY_TIMEOUT}}|$(PROXY_TIMEOUT)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{AKS_LB}}|$(AKS_LB_PARSED)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{PROXY_BODY_SIZE}}|$(PROXY_BODY_SIZE)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{LIMIT_CONNECTIONS}}|$(LIMIT_CONNECTIONS)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{LIMIT_RPM}}|$(LIMIT_RPM)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{LIMIT_RPS}}|$(LIMIT_RPS)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{MEMORY_LIMIT}}|$(MEMORY_LIMIT)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{MEMORY_REQUEST}}|$(MEMORY_REQUEST)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{CPU_REQUEST}}|$(CPU_REQUEST)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{MIN_REPLICAS}}|$(MIN_REPLICAS)|g" ./kubernetes/04-hpa.yml
            sed -i "s|{{MAX_REPLICAS}}|$(MAX_REPLICAS)|g" ./kubernetes/04-hpa.yml
            sed -i "s|{{MEMORY_AUTOSCALE}}|$(MEMORY_AUTOSCALE)|g" ./kubernetes/04-hpa.yml
            sed -i "s|{{FRONTDOOR_ID}}|$(FRONTDOOR_ID)|g" ./kubernetes/03-ingress-object.yml

            cat ./kubernetes/01-deployment.yml
            cat ./kubernetes/02-service.yml
            cat ./kubernetes/03-ingress-object.yml
            cat ./kubernetes/04-hpa.yml
          displayName: 'Replace values in manifest files'

        - task: TriggerBuild@3
          displayName: 'Deploy Configmap-fry9c'
          inputs:
            definitionIsInCurrentTeamProject: true
            buildDefinition: 'BCM-FRY9C-Deploy-ConfigMap'
            queueBuildForUserThatTriggeredBuild: true
            ignoreSslCertificateErrors: false
            useSameSourceVersion: false
            useCustomSourceVersion: false
            useSameBranch: true
            waitForQueuedBuildsToFinish: true
            storeInEnvironmentVariable: false
            templateParameters: "environment: ${{ parameters.environment }}, microservice: ${{ parameters.microservice }}, namespace: ${{ parameters.namespace }} "
            authenticationMethod: 'OAuth Token'
            password: '$(System.AccessToken)'
            enableBuildInQueueCondition: false
            dependentOnSuccessfulBuildCondition: false
            dependentOnFailedBuildCondition: false
            checkbuildsoncurrentbranch: false
            failTaskIfConditionsAreNotFulfilled: false
          condition: succeeded()
          enabled: ${{ parameters.configmap }}

        - task: Kubernetes@1
          displayName: 'Deploy microservice'
          inputs:
            command: 'apply'
            namespace: '${{ parameters.namespace }}'
            arguments: '-f kubernetes/01-deployment.yml -f kubernetes/02-service.yml -f kubernetes/03-ingress-object.yml -f kubernetes/04-hpa.yml'
            output: 'yaml'

        - task: TriggerBuild@3
          displayName: "${{ parameters.microservice }}-${{ parameters.environment }}-Logs "
          inputs:
            definitionIsInCurrentTeamProject: true
            buildDefinition: 'BCM-FRY9C-Logs'
            queueBuildForUserThatTriggeredBuild: true
            ignoreSslCertificateErrors: false
            useSameSourceVersion: false
            useCustomSourceVersion: false
            useSameBranch: true
            waitForQueuedBuildsToFinish: true
            storeInEnvironmentVariable: false
            templateParameters: "environment: ${{ parameters.environment }}, microservice: ${{ parameters.microservice }}, namespace: ${{ parameters.namespace }}"
            authenticationMethod: 'OAuth Token'
            password: '$(System.AccessToken)'
            enableBuildInQueueCondition: false
            dependentOnSuccessfulBuildCondition: false
            dependentOnFailedBuildCondition: false
            checkbuildsoncurrentbranch: false
            failTaskIfConditionsAreNotFulfilled: false
          condition: failed()

        - script: |
            az pipelines runs tag add --run-id $(Build.BuildId) --tag "Environment: $(PORTAL), Service: $(MICROSVC), DeployedFrom: ${{ parameters.branch_artifact_selector }}, SourceVersion: $(BRANCH_ARTIFACT_VALUE_PARSED), Queued By: $(Build.QueuedBy)" --org $(System.TeamFoundationCollectionUri) --project $(System.TeamProjectId)
          displayName: 'Tag pipeline run'
          env:
            AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
          condition: succeededOrFailed()

        - script: |
            echo PORTAL is $(PORTAL)
            echo MICROSVC is $(MICROSVC)
            echo BUILD_VAR is $(BUILD_VAR)
            echo DOCKER_PORT is $(DOCKER_PORT)
            echo INGRESS_REWRITE is '$(INGRESS_REWRITE)'
            echo INGRESS_PATH is '$(INGRESS_PATH)'
            echo PROXY_TIMEOUT is $(PROXY_TIMEOUT)
            echo AKS_LB is $(AKS_LB)
            echo MEMORY_REQUEST is $(MEMORY_REQUEST)
            echo MEMORY_LIMIT is $(MEMORY_LIMIT)
            echo CPU_REQUEST is $(CPU_REQUEST)
            echo MAX_REPLICAS is $(MAX_REPLICAS)
            echo MIN_REPLICAS is $(MIN_REPLICAS)
            echo PROXY_BODY_SIZE is $(PROXY_BODY_SIZE)
            echo LIMIT_CONNECTIONS is $(LIMIT_CONNECTIONS)
          displayName: 'Display variables'
          condition: succeededOrFailed()

        - task: PowerShell@2
          inputs:
            targetType: inline
            script: |
              ls
              Get-ChildItem -Path /home/vsts/work
              Get-Location
              Install-Module -Name PnP.PowerShell -Force -Verbose -Scope CurrentUser
              #Site collection URL
              $SiteURL = "https://sites.ey.com/teams/EYComply-DEV"
              $Time = Get-Date -UFormat "%R" | ForEach-Object { $_ -replace ":", "" }
              $Year = Get-Date -UFormat "%Y"
              $Month = Get-Date -UFormat "%m"
              $Date = Get-Date -UFormat "%d"
              $ArtifactVersion=Get-Content /home/vsts/work/1/artifact/ARTIFACT_VERSION.var
              $FileName = "${{parameters.environment}}"+"-"+"${{parameters.microservice}}"+"-"+$Year+$Month+$Date+"-"+${Time}+"-"+"utc"+"-version-"+$ArtifactVersion+".txt"
              #Connect to SharePoint Online with AppId and AppSecret
              Connect-PnPOnline -Url $SiteURL -ClientId "869db586-4290-4cab-90d1-9f66f1213981" -ClientSecret "czpemoUWrnicaSJoI0B2ISD0Zb/cbXmiT5KejmbccaQ="
              #Relative Path of the Library
              $DestinationPath = "Releases/"
              $SourceFilePath ="/home/vsts/work/1/artifact/environment.var"
              Rename-Item -Path $SourceFilePath -NewName $FileName
              $SourceFilePath ="/home/vsts/work/1/artifact/"+$FileName
              #Upload File to SharePoint Online Library
              Add-PnPFile -Path $SourceFilePath -Folder $DestinationPath
          displayName: 'Release Notes Upload to Sharepoint'
          condition: succeeded()
          enabled: true
