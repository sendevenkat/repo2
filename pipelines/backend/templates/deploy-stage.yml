parameters:
- name: environment
  type: string
- name: microservice
  type: string
- name: branch_artifact_selector
  type: string
- name: branch_artifact_value
  type: string
- name: configmap
  type: boolean
- name: deployFunction
  type: boolean
- name: adoEnv
  type: string

jobs:
- deployment: Microservice
  environment: "EY Comply.${{ parameters.adoEnv }}"
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self

        - script: |
            echo "##vso[task.setvariable variable=BRANCH_ARTIFACT_VALUE_PARSED]$(echo ${{ parameters.branch_artifact_value }} |tr -cd '[:print:]' |tr -d '[[:blank:]]')"
          displayName: 'Clean up input string'

        - script: |
            AKS_LB_PARSED=$(echo "$(AKS_LB)" | tr '[A-Z]' '[a-z]')
            echo "##vso[task.setvariable variable=AKS_LB_PARSED]$AKS_LB_PARSED"
          displayName: 'Set AKS LoadBalancer variable'

        - script: |
            case ${{ parameters.microservice }} in
                camundawrapper|sbadmin)
                  echo "##vso[task.setvariable variable=INGRESS_REWRITE]"/$(PORTAL)/$(${{ parameters.microservice }}-ingress-rewrite)""
                  ;;
                *)
                  echo "##vso[task.setvariable variable=INGRESS_REWRITE]"$(${{ parameters.microservice }}-ingress-rewrite)""
                  ;;
            esac
          displayName: 'Set INGRESS_REWRITE variable'
          enabled: true

        - script: |
            case ${{ parameters.microservice }} in
                gateway)
                  #conditional added for staging frontends in qa33 and uat
                  if [[ ${{ parameters.environment }} == 'qa33' ]] || [[ ${{ parameters.environment }} == 'uat' ]]
                  then
                    INGRESS_PATH='/($(tenant-ingress-pattern)|$(PORTAL)|staging)?/?($(tenant-ingress-pattern)|$(PORTAL))(/|$)(gatewayService)(/|$)?(.*)'
                  else
                    INGRESS_PATH='/($(tenant-ingress-pattern)|$(PORTAL))?/?($(tenant-ingress-pattern)|$(PORTAL))(/|$)(gatewayService)(/|$)?(.*)'
                  fi

                  echo '##vso[task.setvariable variable=INGRESS_PATH]'$INGRESS_PATH''
                  ;;
                camundawrapper|sbadmin)
                  INGRESS_PATH='/($(tenant-ingress-pattern)|$(PORTAL))?/?($(tenant-ingress-pattern)|$(PORTAL))(/|$)($(${{ parameters.microservice }}-ingress-rewrite))(/|$)?(.*)'
                  echo '##vso[task.setvariable variable=INGRESS_PATH]'$INGRESS_PATH''
                  ;;
                *)
                  INGRESS_PATH='/($(tenant-ingress-pattern)|$(PORTAL))?/?($(tenant-ingress-pattern)|$(PORTAL))(/|$)($(INGRESS_REWRITE))(/|$)?(.*)'
                  echo '##vso[task.setvariable variable=INGRESS_PATH]'$INGRESS_PATH''
                  ;;
            esac
          displayName: 'Set INGRESS_PATH variable'
          enabled: true
          condition: and(succeeded(), ne('${{ parameters.environment }}', 'qabcm'))

        - script: |
            case ${{ parameters.microservice }} in
                gateway)
                  INGRESS_PATH='/($(tenant-ingress-pattern)|bcmdemo|$(PORTAL))?/?($(tenant-ingress-pattern)|bcmdemo|$(PORTAL))(/|$)(gatewayService)(/|$)?(.*)'
                  echo '##vso[task.setvariable variable=INGRESS_PATH]'$INGRESS_PATH''
                  ;;
                camundawrapper)
                  INGRESS_PATH='/($(tenant-ingress-pattern)|bcmdemo|$(PORTAL))?/?($(tenant-ingress-pattern)|bcmdemo|$(PORTAL))(/|$)($(${{ parameters.microservice }}-ingress-rewrite))(/|$)?(.*)'
                  echo '##vso[task.setvariable variable=INGRESS_PATH]'$INGRESS_PATH''
                  ;;
                *)
                  INGRESS_PATH='/($(tenant-ingress-pattern)|bcmdemo|$(PORTAL))?/?($(tenant-ingress-pattern)|bcmdemo|$(PORTAL))(/|$)($(INGRESS_REWRITE))(/|$)?(.*)'
                  echo '##vso[task.setvariable variable=INGRESS_PATH]'$INGRESS_PATH''
                  ;;
            esac
          displayName: 'Set INGRESS_PATH variable'
          enabled: true
          condition: and(succeeded(), eq('${{ parameters.environment }}', 'qabcm'))

        - script: |
            cp ./pipelines/backend/templates/hpascript.sh $(Build.SourcesDirectory)
          displayName: Copy hpascript.sh in to $(Build.SourcesDirectory)

        - task: Bash@3
          displayName: 'Set HPA and PROXY variables'
          inputs:
            filePath: hpascript.sh
          env:
            microsvc: ${{ parameters.microservice }}
            env: ${{ parameters.environment }}

        - script: |
            cd $(Build.SourcesDirectory)

            if [ -f ./kubernetes/services/${{ parameters.microservice }}.sh ]; then
              echo "Setting up manifest files for ${{ parameters.microservice }}..."
              chmod u+x ./kubernetes/services/${{ parameters.microservice }}.sh
              ./kubernetes/services/${{ parameters.microservice }}.sh
            fi

            echo "portal vaule is - $(PORTAL)"
            echo "env vaule is - ${{parameters.environment}}"
            echo "adoEnv vaule is - ${{parameters.adoEnv}}"
            echo "Replacing variables in manifest files..."
            sed -i "s|{{PORTAL}}|$(PORTAL)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{PORTAL}}|$(PORTAL)|g" ./kubernetes/02-service.yml
            sed -i "s|{{PORTAL}}|$(PORTAL)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{PORTAL}}|$(PORTAL)|g" ./kubernetes/04-hpa.yml
            sed -i "s|{{MICROSVC}}|$(MICROSVC)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{MICROSVC}}|$(MICROSVC)|g" ./kubernetes/02-service.yml
            sed -i "s|{{MICROSVC}}|$(MICROSVC)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{MICROSVC}}|$(MICROSVC)|g" ./kubernetes/04-hpa.yml
            sed -i "s|{{DOCKER_IMAGE_PATH}}|$(DOCKER_IMAGE_PATH)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{BUILD_VAR}}|$(BUILD_VAR)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{DOCKER_PORT}}|$(DOCKER_PORT)|g" ./kubernetes/02-service.yml
            sed -i "s|{{DOCKER_PORT}}|$(DOCKER_PORT)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{INGRESS_REWRITE}}|$(INGRESS_REWRITE)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s#{{INGRESS_PATH}}#$(INGRESS_PATH)#g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{PROXY_TIMEOUT}}|$(PROXY_TIMEOUT)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{AKS_LB}}|$(AKS_LB_PARSED)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{PROXY_BODY_SIZE}}|$(PROXY_BODY_SIZE)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{LIMIT_CONNECTIONS}}|$(LIMIT_CONNECTIONS)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{LIMIT_RPM}}|$(LIMIT_RPM)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{LIMIT_RPS}}|$(LIMIT_RPS)|g" ./kubernetes/03-ingress-object.yml
            sed -i "s|{{MEMORY_LIMIT}}|$(MEMORY_LIMIT)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{MEMORY_REQUEST}}|$(MEMORY_REQUEST)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{CPU_REQUEST}}|$(CPU_REQUEST)|g" ./kubernetes/01-deployment.yml
            sed -i "s|{{MIN_REPLICAS}}|$(MIN_REPLICAS)|g" ./kubernetes/04-hpa.yml
            sed -i "s|{{MAX_REPLICAS}}|$(MAX_REPLICAS)|g" ./kubernetes/04-hpa.yml
            sed -i "s|{{MEMORY_AUTOSCALE}}|$(MEMORY_AUTOSCALE)|g" ./kubernetes/04-hpa.yml
            sed -i "s|{{FRONTDOOR_ID}}|$(FRONTDOOR_ID)|g" ./kubernetes/03-ingress-object.yml

            cat ./kubernetes/01-deployment.yml
            cat ./kubernetes/02-service.yml
            cat ./kubernetes/03-ingress-object.yml
            cat ./kubernetes/04-hpa.yml
          displayName: 'Replace values in manifest files'

        - task: TriggerBuild@3
          displayName: 'Deploy Configmap'
          inputs:
            definitionIsInCurrentTeamProject: true
            buildDefinition: 'EYC2-Deploy-ConfigMap'
            queueBuildForUserThatTriggeredBuild: true
            ignoreSslCertificateErrors: false
            useSameSourceVersion: false
            useCustomSourceVersion: false
            useSameBranch: true
            waitForQueuedBuildsToFinish: true
            storeInEnvironmentVariable: false
            templateParameters: "environment: ${{ parameters.environment }}, microservice: ${{ parameters.microservice }}"
            authenticationMethod: 'OAuth Token'
            password: '$(System.AccessToken)'
            enableBuildInQueueCondition: false
            dependentOnSuccessfulBuildCondition: false
            dependentOnFailedBuildCondition: false
            checkbuildsoncurrentbranch: false
            failTaskIfConditionsAreNotFulfilled: false
          condition: and(succeeded(), not(in('${{ parameters.microservice }}', 'zipkin', 'zipkinui', 'clamav')))
          enabled: ${{ parameters.configmap }}

        - task: Kubernetes@1
          displayName: 'Deploy microservice'
          inputs:
            command: 'apply'
            namespace: '${{ parameters.adoEnv }}'
            arguments: '-f kubernetes/01-deployment.yml -f kubernetes/02-service.yml -f kubernetes/03-ingress-object.yml -f kubernetes/04-hpa.yml'
            output: 'yaml'

        # - task: KubernetesManifest@1
        #   displayName: 'Deploy microservice'
        #   inputs:
        #     action: 'deploy'
        #     namespace: '${{ parameters.adoEnv }}'
        #     manifests: |
        #       kubernetes/01-deployment.yml
        #       kubernetes/02-service.yml
        #       kubernetes/03-ingress-object.yml
        #       kubernetes/04-hpa.yml
        #   enabled: true

        - task: TriggerBuild@3
          displayName: "${{ parameters.microservice }}-${{ parameters.environment }}-Logs "
          inputs:
            definitionIsInCurrentTeamProject: true
            buildDefinition: 'EYC2-Logs'
            queueBuildForUserThatTriggeredBuild: true
            ignoreSslCertificateErrors: false
            useSameSourceVersion: false
            useCustomSourceVersion: false
            useSameBranch: true
            waitForQueuedBuildsToFinish: true
            storeInEnvironmentVariable: false
            templateParameters: "environment: ${{ parameters.environment }}, microservice: ${{ parameters.microservice }}"
            authenticationMethod: 'OAuth Token'
            password: '$(System.AccessToken)'
            enableBuildInQueueCondition: false
            dependentOnSuccessfulBuildCondition: false
            dependentOnFailedBuildCondition: false
            checkbuildsoncurrentbranch: false
            failTaskIfConditionsAreNotFulfilled: false
          condition: failed()
          enabled: true

        - script: |
            az pipelines runs tag add --run-id $(Build.BuildId) --tag "Environment: ${{ parameters.environment }}, Service: $(MICROSVC), DeployedFrom: ${{ parameters.branch_artifact_selector }}, SourceVersion: $(BRANCH_ARTIFACT_VALUE_PARSED), Queued By: $(Build.QueuedBy)" --org $(System.TeamFoundationCollectionUri) --project $(System.TeamProjectId)
          displayName: 'Tag pipeline run'
          env:
            AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
          condition: succeededOrFailed()
          enabled: true

        - script: |
            echo PORTAL is $(PORTAL)
            echo AKS NAMESPACE is ${{ parameters.adoEnv }}
            echo MICROSVC is $(MICROSVC)
            echo BUILD_VAR is $(BUILD_VAR)
            echo DOCKER_PORT is $(DOCKER_PORT)
            echo INGRESS_REWRITE is '$(INGRESS_REWRITE)'
            echo INGRESS_PATH is '$(INGRESS_PATH)'
            echo PROXY_TIMEOUT is $(PROXY_TIMEOUT)
            echo AKS_LB is $(AKS_LB)
            echo MEMORY_REQUEST is $(MEMORY_REQUEST)
            echo MEMORY_LIMIT is $(MEMORY_LIMIT)
            echo CPU_REQUEST is $(CPU_REQUEST)
            echo MAX_REPLICAS is $(MAX_REPLICAS)
            echo MIN_REPLICAS is $(MIN_REPLICAS)
            echo PROXY_BODY_SIZE is $(PROXY_BODY_SIZE)
            echo LIMIT_CONNECTIONS is $(LIMIT_CONNECTIONS)
          displayName: 'Display variables'
          condition: succeededOrFailed()
          enabled: true

        - template: upload-release-notes.yml
          parameters:
            environment: "${{ parameters.environment }}"
            microservice: "${{ parameters.microservice }}"

- job: FunctionApp
  condition: and(eq('${{ parameters.deployFunction }}', 'true'), eq('${{ parameters.microservice }}', 'download'))
  steps:
  - script: |
      if [[ ${{ parameters.environment }} == qa33 ]] || [[ ${{ parameters.environment }} == qa35 ]]; then
        echo "##vso[task.setvariable variable=var_functionAppInstance]Development"
        echo "##vso[task.setvariable variable=var_branchToUse]develop"
      elif [[ ${{ parameters.environment }} == qa36 ]]; then
        echo "##vso[task.setvariable variable=var_functionAppInstance]QA"
        echo "##vso[task.setvariable variable=var_branchToUse]QA"
      elif [[ ${{ parameters.environment }} == qa37 ]]; then
        echo "##vso[task.setvariable variable=var_functionAppInstance]Regression"
        echo "##vso[task.setvariable variable=var_branchToUse]release"
      elif [[ ${{ parameters.environment }} == qa37 ]]; then
        echo "##vso[task.setvariable variable=var_functionAppInstance]QABCM"
        echo "##vso[task.setvariable variable=var_branchToUse]qabcm"
      elif [[ ${{ parameters.environment }} == uattrp01 ]]; then
        echo "##vso[task.setvariable variable=var_functionAppInstance]UAT"
        echo "##vso[task.setvariable variable=var_branchToUse]master"
      elif [[ ${{ parameters.environment }} == trp ]]; then
        echo "##vso[task.setvariable variable=var_functionAppInstance]Production"
        echo "##vso[task.setvariable variable=var_branchToUse]master"
      fi
    displayName: 'Set Function App instance variable'

  - task: TriggerBuild@3
    displayName: 'Deploy function'
    inputs:
      definitionIsInCurrentTeamProject: true
      buildDefinition: 'EYC2-Deploy-AzureFunction'
      queueBuildForUserThatTriggeredBuild: true
      ignoreSslCertificateErrors: false
      useSameSourceVersion: false
      useCustomSourceVersion: false
      useSameBranch: false
      branchToUse: $(var_branchToUse)
      waitForQueuedBuildsToFinish: true
      storeInEnvironmentVariable: false
      templateParameters: "environment: $(var_functionAppInstance)"
      authenticationMethod: 'OAuth Token'
      password: '$(System.AccessToken)'
      enableBuildInQueueCondition: false
      dependentOnSuccessfulBuildCondition: false
      dependentOnFailedBuildCondition: false
      checkbuildsoncurrentbranch: false
      failTaskIfConditionsAreNotFulfilled: false
