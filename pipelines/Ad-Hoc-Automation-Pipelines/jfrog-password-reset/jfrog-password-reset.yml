trigger: none
pr: none

schedules:
- cron: '0 0 10 1,3,5,7,9,11 *'
  displayName: 10th DoM on every secondary M
  branches:
    include:
    - master

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: projects
  type: object
  default:
   - docker
   - gradle
   - maven

- name: serviceConnectionsADO
  type: object
  default:
  - 'EYC jFrog Artifactory - Maven'
  - 'EYC jFrog Artifactory - Gradle'
  - 'EYC jFrog Artifactory - Docker'
  - 'EYC jFrog Docker Registry'
  - 'EYC jFrog Docker Registry dev'
  - 'EYC jFrog Docker Registry uat'
  - 'EYC jFrog Docker Registry prod'

- name: kaasEnvironments
  type: object
  default:
    - dev
    - uat
    - prod
    - prod-dr

- name: StopDRClusterPostUpdate
  displayName: "Stop DR Cluster Post Update"
  type: boolean
  default: true

variables:
- name: kvName
  value: USEPEYC002AKV04
- name: jfrogUri
  value: "https://eyctpeu.jfrog.io/artifactory"
- name: secretNameKubernetes
  value: 'eycomply-jfrog-docker-registry'
- template: ../../../variables/clusters.yml
- template: ../../../variables/resource-groups.yml
- template: ../../../variables/subscriptions.yml

steps:
- ${{ each project in parameters.projects }}:
  - task: AzurePowerShell@5
    name: setupjfrogpassword_${{ project }}
    displayName: 'Reset password for ${{ project }}'
    inputs:
      azureSubscription: 'EYComply Production'
      ScriptPath: '$(Build.SourcesDirectory)/pipelines/Ad-Hoc-Automation-Pipelines/jfrog-password-reset/scripts/reset-JFROGpassword.ps1'
      ScriptArguments: > 
        -repo ${{ project }}
        -kvName $(kvName) 
        -secretNameKey eycomply-${{ project }}-service-account-apikey-jfrog
        -secretNamePass eycomply-${{ project }}-service-account-password
        -jfrogUser eycomply-${{ project }}-service-account
        -jfrogUri $(jfrogUri)
        -jfrogRepository  https://eyctpeu.jfrog.io/artifactory/eycomply-${{ project }}
      azurePowerShellVersion: LatestVersion
    enabled: true

- ${{ each serviceConnectionName in parameters.serviceConnectionsADO }}:
  - task: PowerShell@2
    displayName: 'Refresh service connection password for ${{ serviceConnectionName }}'
    inputs:
      targetType: 'FilePath'
      filePath: "$(System.DefaultWorkingDirectory)/pipelines/Ad-Hoc-Automation-Pipelines/jfrog-password-reset/scripts/update-service-endpoint.ps1"
      arguments: >
              -token "$(ADO_ACCESS_TOKEN)"
              -serviceConnectionName "${{ serviceConnectionName }}"
              -serviceConnectionPasswordMaven "$(setupjfrogpassword_maven.generatedPassword-maven)"
              -serviceConnectionPasswordGradle "$(setupjfrogpassword_gradle.generatedPassword-gradle)"
              -serviceConnectionPasswordDocker "$(setupjfrogpassword_docker.generatedPassword-docker)"
    enabled: true

- ${{ each environment in parameters.kaasEnvironments }}:
  - ${{ if eq(environment, 'prod-dr') }}:
    - task: AzureCLI@2
      displayName: 'Start ${{ upper(environment) }} cluster [$(${{ environment }}-cluster)]'
      inputs:
        azureSubscription: $(${{ environment }}-sub)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          if [ "$(az aks show --name $(${{ environment }}-cluster) --resource-group $(${{ environment }}-rg) --query 'powerState.code' -o tsv)" != "Running" ]; then
            echo "Cluster is not running. Starting the cluster..."
            az aks start --name $(${{ environment }}-cluster) --resource-group $(${{ environment }}-rg)
            echo "Cluster started successfully"
          else
            echo "Cluster is already running."
          fi
        addSpnToEnvironment: true
        useGlobalConfig: true
      enabled: true
  - task: AzureCLI@2
    displayName: 'Authenticate ${{ upper(environment) }} cluster [$(${{ environment }}-cluster)]'
    inputs:
      azureSubscription: $(${{ environment }}-sub)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az aks get-credentials --admin -g $(${{ environment }}-rg) -n $(${{ environment }}-cluster)
        
        if [ "${{ environment }}" == "prod" ] || [ "${{ environment }}" == "prod-dr" ]; then
          env=prod
          echo "Environment is $env"
        else
          env=${{ environment }}
          echo "Environment is $env"
        fi

        echo "$(setupjfrogpassword_docker.generatedPassword-docker)" | \
          docker \
          --config /$(Agent.TempDirectory) \
          login eyctpeu-eycomply-docker-$env-eu.jfrog.io \
          -u eycomply-docker-service-account \
          --password-stdin 
      addSpnToEnvironment: true
      useGlobalConfig: true
    enabled: true

- ${{ each environment in parameters.kaasEnvironments }}:
  - task: AzureCLI@2
    displayName: 'Update ${{ upper(environment) }} cluster [$(${{ environment }}-cluster)]'
    inputs:
      azureSubscription: $(${{ environment }}-sub)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |

        if [[ ${{ environment }} == "dev" ]]; then
          k8sNamespace=("eycomply" "bcm" "fry9c")
        else
          k8sNamespace=( ${{ environment }} )
        fi
     
        echo 'Kubernetes k8sNamespace is '$k8sNamespace

        az aks get-credentials --admin -g $(${{ environment }}-rg) -n $(${{ environment }}-cluster)
        
        for namespaceName in "${k8sNamespace[@]}"
        do
          kubectl -n $namespaceName create secret docker-registry $(secretNameKubernetes) \
            --from-file=.dockerconfigjson=$(Agent.TempDirectory)/config.json \
            --save-config \
            --dry-run=client \
            -o yaml | \
            kubectl apply -f -
        done
                    
      addSpnToEnvironment: true
      useGlobalConfig: true
    enabled: true
  - ${{ if and(eq(environment, 'prod-dr'), eq(parameters.StopDRClusterPostUpdate, true) )}}:
      - task: AzureCLI@2
        displayName: 'Stop ${{ upper(environment) }} cluster [$(${{ environment }}-cluster)]'
        inputs:
          azureSubscription: $(${{ environment }}-sub)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az aks stop --name $(${{ environment }}-cluster) --resource-group $(${{ environment }}-rg)
            while [ "$(az aks show --name $(${{ environment }}-cluster) --resource-group $(${{ environment }}-rg) --query 'powerState.code' -o tsv)" != "Stopped" ]; do
              echo "Waiting for the cluster to stop"
              sleep 10
            done
            echo "Cluster stopped successfully"
          addSpnToEnvironment: true
          useGlobalConfig: true
        enabled: true

